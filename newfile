<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Business English Vocabulary</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.min.js"></script>
</head>
<body>
    <div id="root"></div>
    
    <script type="text/babel">
        const { useState } = React;
        const { Volume2, ChevronLeft, ChevronRight, Check, X, Award } = lucide;

        const vocabularyData = {
          'SMALL TALK IN THE OFFICE': [
            { term: 'HOW WAS YOUR WEEKEND?', definition: 'A COMMON MONDAY MORNING GREETING.', example: 'GOOD MORNING, SARAH. _____', acceptedAnswers: ['HOW WAS YOUR WEEKEND?', 'HOW WAS YOUR WEEKEND'] },
            { term: 'CATCH UP', definition: 'TO TALK TO SOMEONE YOU HAVEN\'T SEEN IN A WHILE TO FIND OUT THEIR NEWS.', example: 'LET\'S _____ SOON AND DISCUSS THE NEW PROJECT.', acceptedAnswers: ['CATCH UP'] },
            { term: 'GRAB A COFFEE', definition: 'A CASUAL INVITATION TO GET COFFEE TOGETHER.', example: 'DO YOU WANT TO _____ LATER THIS AFTERNOON?', acceptedAnswers: ['GRAB A COFFEE'] },
            { term: 'LOOKING FORWARD TO IT', definition: 'EXPRESSING EXCITEMENT ABOUT A FUTURE EVENT.', example: 'THANKS FOR THE INVITE. I\'M REALLY _____', acceptedAnswers: ['LOOKING FORWARD TO IT'] },
            { term: 'HUMP DAY', definition: 'A NICKNAME FOR WEDNESDAY, THE MIDDLE OF THE WORK WEEK.', example: 'HAPPY _____! WE\'RE HALFWAY TO THE WEEKEND.', acceptedAnswers: ['HUMP DAY'] },
            { term: 'LONG TIME NO SEE', definition: 'AN EXPRESSION USED WHEN YOU MEET SOMEONE YOU HAVEN\'T SEEN IN A WHILE.', example: 'JOHN! _____ HOW HAVE YOU BEEN?', acceptedAnswers: ['LONG TIME NO SEE'] },
            { term: 'KEEP ME POSTED', definition: 'A REQUEST TO BE KEPT INFORMED ABOUT A SITUATION.', example: '_____ ON THE CLIENT\'S FEEDBACK.', acceptedAnswers: ['KEEP ME POSTED', 'KEEP ME IN THE LOOP'] },
            { term: 'TOUCH BASE', definition: 'TO MAKE CONTACT WITH SOMEONE BRIEFLY.', example: 'I\'LL _____ WITH YOU LATER THIS WEEK.', acceptedAnswers: ['TOUCH BASE'] },
            { term: 'ON THE SAME PAGE', definition: 'TO HAVE A SHARED UNDERSTANDING.', example: 'LET\'S HAVE A QUICK MEETING TO ENSURE WE ARE ALL _____', acceptedAnswers: ['ON THE SAME PAGE'] },
            { term: 'WRAP UP', definition: 'TO FINISH OR COMPLETE SOMETHING.', example: 'LET\'S _____ THIS MEETING IN THE NEXT 10 MINUTES.', acceptedAnswers: ['WRAP UP'] },
          ],
          'BUSINESS MEETINGS': [
            { term: 'AGENDA', definition: 'A LIST OF ITEMS TO BE DISCUSSED AT A MEETING.', example: 'PLEASE REVIEW THE _____ BEFORE THE MEETING TOMORROW.', acceptedAnswers: ['AGENDA'] },
            { term: 'MINUTES', definition: 'THE OFFICIAL WRITTEN RECORD OF A MEETING.', example: 'SARAH WILL BE TAKING THE _____ TODAY.', acceptedAnswers: ['MINUTES'] },
            { term: 'ACTION ITEMS', definition: 'TASKS ASSIGNED TO INDIVIDUALS DURING A MEETING.', example: 'THE _____ FROM THE MEETING HAVE BEEN DISTRIBUTED VIA EMAIL.', acceptedAnswers: ['ACTION ITEMS'] },
            { term: 'FACILITATOR', definition: 'THE PERSON WHO RUNS THE MEETING.', example: 'THE PROJECT MANAGER WILL ACT AS THE _____ FOR THIS SESSION.', acceptedAnswers: ['FACILITATOR'] },
            { term: 'QUORUM', definition: 'THE MINIMUM NUMBER OF PEOPLE NEEDED FOR A MEETING TO BE VALID.', example: 'WE CAN\'T VOTE UNTIL WE HAVE A _____', acceptedAnswers: ['QUORUM'] },
            { term: 'TABLE A MOTION', definition: 'TO POSTPONE THE DISCUSSION OF A TOPIC.', example: 'LET\'S _____ UNTIL WE HAVE MORE DATA.', acceptedAnswers: ['TABLE A MOTION', 'TABLE THE MOTION'] },
            { term: 'CONSENSUS', definition: 'A GENERAL AGREEMENT AMONG ALL MEMBERS.', example: 'AFTER A LONG DISCUSSION, WE FINALLY REACHED A _____', acceptedAnswers: ['CONSENSUS'] },
            { term: 'BALLPARK FIGURE', definition: 'A ROUGH ESTIMATE.', example: 'CAN YOU GIVE ME A _____ FOR THE PROJECT COST?', acceptedAnswers: ['BALLPARK FIGURE'] },
            { term: 'KICK OFF', definition: 'TO FORMALLY START A MEETING OR PROJECT.', example: 'WE WILL _____ THE PROJECT WITH A TEAM-WIDE MEETING.', acceptedAnswers: ['KICK OFF'] },
            { term: 'DEBRIEF', definition: 'A MEETING TO DISCUSS THE OUTCOME OF A COMPLETED PROJECT OR EVENT.', example: 'LET\'S SCHEDULE A _____ TO DISCUSS WHAT WENT WELL.', acceptedAnswers: ['DEBRIEF'] },
          ],
          'FINANCE': [
            { term: 'ASSET', definition: 'PROPERTY OWNED BY A PERSON OR COMPANY, REGARDED AS HAVING VALUE.', example: 'THE COMPANY\'S _____ INCLUDE BUILDINGS AND EQUIPMENT.', acceptedAnswers: ['ASSETS', 'ASSET'] },
            { term: 'LIABILITY', definition: 'A COMPANY\'S LEGAL DEBTS OR OBLIGATIONS.', example: 'LOANS AND ACCOUNTS PAYABLE ARE CONSIDERED _____', acceptedAnswers: ['LIABILITIES', 'LIABILITY'] },
            { term: 'REVENUE', definition: 'THE TOTAL AMOUNT OF INCOME GENERATED BY THE SALE OF GOODS OR SERVICES.', example: 'THE COMPANY\'S _____ INCREASED BY 15% LAST YEAR.', acceptedAnswers: ['REVENUE'] },
            { term: 'PROFIT MARGIN', definition: 'THE PERCENTAGE OF REVENUE THAT A COMPANY KEEPS AS PROFIT.', example: 'WE NEED TO IMPROVE OUR _____ TO STAY COMPETITIVE.', acceptedAnswers: ['PROFIT MARGIN'] },
            { term: 'CASH FLOW', definition: 'THE NET AMOUNT OF CASH BEING TRANSFERRED INTO AND OUT OF A BUSINESS.', example: 'POSITIVE _____ IS ESSENTIAL FOR A HEALTHY BUSINESS.', acceptedAnswers: ['CASH FLOW'] },
            { term: 'BALANCE SHEET', definition: 'A STATEMENT OF THE ASSETS, LIABILITIES, AND CAPITAL OF A BUSINESS AT A PARTICULAR POINT IN TIME.', example: 'THE _____ PROVIDES A SNAPSHOT OF THE COMPANY\'S FINANCIAL HEALTH.', acceptedAnswers: ['BALANCE SHEET'] },
            { term: 'ROI', definition: 'A MEASURE USED TO EVALUATE THE EFFICIENCY OF AN INVESTMENT.', example: 'THE MARKETING CAMPAIGN HAD AN EXCELLENT _____', acceptedAnswers: ['RETURN ON INVESTMENT', 'ROI'] },
            { term: 'CAPITAL', definition: 'FINANCIAL ASSETS OR THE FINANCIAL VALUE OF ASSETS.', example: 'THEY ARE TRYING TO RAISE _____ FOR THEIR NEW VENTURE.', acceptedAnswers: ['CAPITAL'] },
            { term: 'DEPRECIATION', definition: 'THE REDUCTION IN THE VALUE OF AN ASSET OVER TIME.', example: 'THE _____ OF THE COMPANY CARS IS A BUSINESS EXPENSE.', acceptedAnswers: ['DEPRECIATION'] },
            { term: 'EQUITY', definition: 'THE VALUE OF THE SHARES ISSUED BY A COMPANY.', example: 'HE HAS A SIGNIFICANT _____ STAKE IN THE COMPANY.', acceptedAnswers: ['EQUITY'] },
          ],
          'IT': [
            { term: 'CLOUD COMPUTING', definition: 'STORING AND ACCESSING DATA AND PROGRAMS OVER THE INTERNET INSTEAD OF YOUR COMPUTER\'S HARD DRIVE.', example: 'WE MIGRATED OUR SERVERS TO _____ FOR BETTER SCALABILITY.', acceptedAnswers: ['CLOUD COMPUTING'] },
            { term: 'CYBERSECURITY', definition: 'THE PRACTICE OF PROTECTING SYSTEMS, NETWORKS, AND PROGRAMS FROM DIGITAL ATTACKS.', example: '_____ IS A TOP PRIORITY FOR OUR COMPANY.', acceptedAnswers: ['CYBERSECURITY'] },
            { term: 'BANDWIDTH', definition: 'THE MAXIMUM RATE OF DATA TRANSFER ACROSS A GIVEN PATH.', example: 'WE NEED TO INCREASE OUR INTERNET _____ TO SUPPORT VIDEO CONFERENCING.', acceptedAnswers: ['BANDWIDTH'] },
            { term: 'FIREWALL', definition: 'A NETWORK SECURITY SYSTEM THAT MONITORS AND CONTROLS INCOMING AND OUTGOING NETWORK TRAFFIC.', example: 'A _____ HELPS PROTECT OUR NETWORK FROM UNAUTHORIZED ACCESS.', acceptedAnswers: ['FIREWALL'] },
            { term: 'DATABASE', definition: 'AN ORGANIZED COLLECTION OF STRUCTURED INFORMATION, OR DATA, TYPICALLY STORED ELECTRONICALLY.', example: 'ALL CUSTOMER INFORMATION IS STORED IN A SECURE _____', acceptedAnswers: ['DATABASE'] },
            { term: 'ALGORITHM', definition: 'A PROCESS OR SET OF RULES TO BE FOLLOWED IN CALCULATIONS OR OTHER PROBLEM-SOLVING OPERATIONS.', example: 'SEARCH ENGINES USE A COMPLEX _____ TO RANK WEBSITES.', acceptedAnswers: ['ALGORITHM'] },
            { term: 'VPN', definition: 'A SERVICE THAT PROTECTS YOUR INTERNET CONNECTION AND PRIVACY ONLINE.', example: 'EMPLOYEES MUST USE A _____ TO ACCESS THE COMPANY NETWORK REMOTELY.', acceptedAnswers: ['VPN'] },
            { term: 'SOFTWARE', definition: 'THE PROGRAMS AND OTHER OPERATING INFORMATION USED BY A COMPUTER.', example: 'WE NEED TO INSTALL THE LATEST _____ UPDATES.', acceptedAnswers: ['SOFTWARE'] },
            { term: 'ENCRYPTION', definition: 'THE PROCESS OF CONVERTING INFORMATION OR DATA INTO A CODE TO PREVENT UNAUTHORIZED ACCESS.', example: '_____ IS USED TO PROTECT SENSITIVE DATA.', acceptedAnswers: ['ENCRYPTION'] },
            { term: 'API', definition: 'A SET OF RULES THAT LETS DIFFERENT SOFTWARE APPLICATIONS COMMUNICATE WITH EACH OTHER.', example: 'WE USE THE GOOGLE MAPS _____ TO DISPLAY LOCATIONS.', acceptedAnswers: ['API'] },
          ],
        };

        const BusinessEnglishApp = () => {
          const [appState, setAppState] = useState({
            stage: 'CATEGORY_SELECTION',
            currentCategory: null,
            vocabulary: [],
            currentCard: 0,
            showDefinition: false,
            quizAnswers: {},
            gapFillAnswers: {},
            score: 0,
            showQuizResults: false,
            showGapFillResults: false,
          });

          const {
            stage, currentCategory, vocabulary, currentCard, showDefinition,
            quizAnswers, gapFillAnswers, score, showQuizResults, showGapFillResults,
          } = appState;
          
          const availableCategories = Object.keys(vocabularyData);
          const shuffleArray = (array) => [...array].sort(() => Math.random() - 0.5);

          const resetState = (category = null) => {
            const newVocab = category ? shuffleArray(vocabularyData[category]).slice(0, 10) : [];
            const newQuizOptions = newVocab.map((item) => {
                const correctDef = item.definition;
                const allDefs = vocabularyData[category].map(v => v.definition);
                const wrongDefs = shuffleArray(allDefs.filter(d => d !== correctDef)).slice(0, 3);
                return shuffleArray([correctDef, ...wrongDefs]);
            });

            setAppState({
              stage: category ? 'FLASHCARDS' : 'CATEGORY_SELECTION',
              currentCategory: category,
              vocabulary: newVocab,
              quizOptions: newQuizOptions,
              currentCard: 0,
              showDefinition: false,
              quizAnswers: {},
              gapFillAnswers: {},
              score: 0,
              showQuizResults: false,
              showGapFillResults: false,
            });
          };

          const speak = (text) => {
            if ('speechSynthesis' in window) {
              const utterance = new SpeechSynthesisUtterance(text);
              utterance.lang = 'en-US';
              window.speechSynthesis.speak(utterance);
            }
          };

          const handleFlashcardNav = (direction) => {
            const nextCard = currentCard + direction;
            if (nextCard >= 0 && nextCard < vocabulary.length) {
              setAppState(prev => ({ ...prev, currentCard: nextCard, showDefinition: false }));
            } else if (direction === 1) {
              setAppState(prev => ({ ...prev, stage: 'QUIZ' }));
            }
          };

          const handleAnswer = (type, index, value) => {
            setAppState(prev => ({
              ...prev,
              [`${type}Answers`]: { ...prev[`${type}Answers`], [index]: value },
            }));
          };
          
          const checkAnswers = (type) => {
            if (type === 'quiz') {
              let correctCount = 0;
              vocabulary.forEach((item, index) => {
                if (quizAnswers[index] === item.definition) correctCount++;
              });
              setAppState(prev => ({ ...prev, score: correctCount, showQuizResults: true }));
            } else {
              let gapFillCorrect = 0;
              vocabulary.forEach((item, index) => {
                const userAnswer = (gapFillAnswers[index] || '').toLowerCase().trim();
                const accepted = item.acceptedAnswers.map(a => a.toLowerCase());
                if (accepted.includes(userAnswer)) gapFillCorrect++;
              });
              setAppState(prev => ({ ...prev, score: prev.score + gapFillCorrect, showGapFillResults: true }));
            }
          };

          const moveToNextStage = (nextStage) => {
            setAppState(prev => ({ ...prev, stage: nextStage }));
          };
          
          if (stage === 'CATEGORY_SELECTION') {
            return (
              <div className="min-h-screen w-full bg-slate-100 p-4 sm:p-8 uppercase">
                <div className="max-w-4xl mx-auto">
                  <div className="text-center mb-8">
                    <h1 className="text-4xl font-black text-blue-900 mb-2">BUSINESS ENGLISH VOCABULARY</h1>
                    <p className="text-lg text-blue-700">CHOOSE A CATEGORY TO START LEARNING</p>
                  </div>
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                    {availableCategories.map(category => (
                      <button key={category} onClick={() => resetState(category)}
                        className="p-6 bg-white rounded-xl shadow-lg hover:shadow-2xl hover:-translate-y-2 transition-all duration-300 text-left flex flex-col justify-between h-36">
                        <h2 className="text-xl font-bold text-blue-900">{category}</h2>
                        <div className="text-blue-600 font-semibold self-end">START →</div>
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            );
          }

          const currentTerm = vocabulary[currentCard];

          if (stage === 'FLASHCARDS') {
            return (
              <div className="min-h-screen bg-gradient-to-br from-blue-900 to-blue-700 p-4 sm:p-8 flex items-center justify-center uppercase">
                <div className="max-w-2xl w-full mx-auto bg-white/10 backdrop-blur-lg rounded-2xl shadow-2xl p-6 sm:p-8 text-white">
                  <div className="text-center mb-6">
                    <p className="text-blue-300 font-semibold">{currentCategory}</p>
                    <h1 className="text-2xl font-bold tracking-wider">FLASHCARDS</h1>
                    <p className="text-blue-300 text-sm mt-2">CARD {currentCard + 1} OF {vocabulary.length}</p>
                  </div>
                  
                  <div onClick={() => setAppState(p => ({...p, showDefinition: !showDefinition}))}
                    className="bg-white text-blue-900 rounded-xl shadow-lg min-h-60 p-6 flex flex-col justify-center items-center cursor-pointer transition-transform duration-500 relative"
                    style={{ transformStyle: 'preserve-3d', transform: showDefinition ? 'rotateY(180deg)' : 'rotateY(0deg)' }}>
                      
                    <div className="absolute inset-0 p-6 flex flex-col justify-center items-center text-center" style={{ backfaceVisibility: 'hidden' }}>
                      <h2 className="text-4xl font-black mb-2">{currentTerm.term}</h2>
                      <button onClick={(e) => { e.stopPropagation(); speak(currentTerm.term); }} className="p-2 rounded-full hover:bg-blue-100 transition-colors">
                        <Volume2 className="text-blue-500" size={28}/>
                      </button>
                      <p className="text-blue-400 italic mt-4">CLICK CARD TO SEE DEFINITION</p>
                    </div>

                    <div className="absolute inset-0 p-6 flex flex-col justify-center items-center text-center" style={{ backfaceVisibility: 'hidden', transform: 'rotateY(180deg)' }}>
                      <p className="text-xl font-semibold">{currentTerm.definition}</p>
                    </div>
                  </div>

                  <div className="flex justify-between items-center mt-8">
                    <button onClick={() => handleFlashcardNav(-1)} disabled={currentCard === 0}
                      className="flex items-center gap-2 px-6 py-3 bg-white/20 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-white/30 transition">
                      <ChevronLeft size={20} /> PREVIOUS
                    </button>
                    <button onClick={() => handleFlashcardNav(1)}
                      className="flex items-center gap-2 px-6 py-3 bg-yellow-400 text-blue-900 font-bold rounded-lg hover:bg-yellow-300 transition shadow-lg">
                      {currentCard === vocabulary.length - 1 ? 'START QUIZ' : 'NEXT'} <ChevronRight size={20} />
                    </button>
                  </div>
                </div>
              </div>
            );
          }
          
          if (stage === 'QUIZ') {
            return (
              <div className="min-h-screen bg-slate-100 p-4 sm:p-8 uppercase">
                <div className="max-w-3xl mx-auto">
                  <div className="text-center mb-8">
                     <p className="text-blue-700 font-semibold">{currentCategory}</p>
                    <h1 className="text-4xl font-black text-blue-900 mb-2">QUIZ TIME!</h1>
                    <p className="text-lg text-blue-700">MATCH EACH TERM WITH ITS CORRECT DEFINITION</p>
                  </div>
                  <div className="bg-white rounded-2xl shadow-xl p-6 sm:p-8">
                    {vocabulary.map((item, index) => {
                      const isCorrect = quizAnswers[index] === item.definition;
                      const isAnswered = quizAnswers[index] !== undefined;
                      return (
                        <div key={index} className="mb-6 pb-6 border-b-2 border-slate-200 last:border-b-0">
                          <div className="flex items-center justify-between mb-3">
                            <h3 className="text-xl font-bold text-blue-900">{item.term}</h3>
                            {showQuizResults && isAnswered && (
                              <span className={`flex items-center gap-1 px-3 py-1 rounded-full text-sm font-semibold ${isCorrect ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}>
                                {isCorrect ? <Check size={16} /> : <X size={16} />} {isCorrect ? 'CORRECT!' : 'INCORRECT'}
                              </span>
                            )}
                          </div>
                          <div className="space-y-2">
                            {appState.quizOptions[index].map((option, optIndex) => {
                              const isSelected = quizAnswers[index] === option;
                              const isCorrectOption = option === item.definition;
                              let baseClass = 'w-full text-left p-3 border-2 rounded-lg cursor-pointer hover:bg-slate-50 transition-colors duration-200';
                              
                              if (showQuizResults) {
                                if (isCorrectOption) {
                                    baseClass += ' bg-green-100 border-green-500 text-green-900';
                                } else if (isSelected && !isCorrect) {
                                    baseClass += ' bg-yellow-100 border-yellow-500 text-yellow-900';
                                } else {
                                    baseClass += ' border-slate-300 opacity-70';
                                }
                              } else if (isSelected) {
                                  baseClass += ' bg-blue-100 border-blue-500';
                              } else {
                                  baseClass += ' border-slate-300';
                              }

                              return (
                                <button key={optIndex} onClick={() => !showQuizResults && handleAnswer('quiz', index, option)} disabled={showQuizResults} className={baseClass}>
                                 {option}
                                </button>
                              );
                            })}
                          </div>
                        </div>
                      );
                    })}
                    
                    {!showQuizResults ? (
                      <button onClick={() => checkAnswers('quiz')} disabled={Object.keys(quizAnswers).length < vocabulary.length}
                        className="w-full mt-6 px-6 py-4 bg-blue-800 text-white rounded-lg font-semibold disabled:opacity-50 disabled:cursor-not-allowed hover:bg-blue-900 transition text-lg shadow-lg">
                        CHECK ANSWERS
                      </button>
                    ) : (
                      <button onClick={() => moveToNextStage('GAP_FILL')}
                        className="w-full mt-6 px-6 py-4 bg-green-600 text-white rounded-lg font-semibold hover:bg-green-700 transition text-lg shadow-lg">
                        CONTINUE TO GAP FILL
                      </button>
                    )}
                  </div>
                </div>
              </div>
            );
          }

          if (stage === 'GAP_FILL') {
            return (
              <div className="min-h-screen bg-slate-100 p-4 sm:p-8 uppercase">
                <div className="max-w-3xl mx-auto">
                  <div className="text-center mb-8">
                    <p className="text-blue-700 font-semibold">{currentCategory}</p>
                    <h1 className="text-4xl font-black text-blue-900 mb-2">FILL IN THE BLANKS</h1>
                    <p className="text-lg text-blue-700">COMPLETE THESE BUSINESS SENTENCES. QUIZ SCORE: {score}/{vocabulary.length}</p>
                  </div>
                  <div className="bg-white rounded-2xl shadow-xl p-6 sm:p-8">
                    {vocabulary.map((item, index) => {
                      const userAnswer = (gapFillAnswers[index] || '').toLowerCase().trim();
                      const isCorrect = item.acceptedAnswers.map(a => a.toLowerCase()).includes(userAnswer);
                      const isAnswered = userAnswer !== '';
                      
                      let inputClass = 'mx-2 px-2 py-1 border-b-2 outline-none min-w-48 text-center font-bold uppercase tracking-wider transition-colors duration-300';
                      if (showGapFillResults && isAnswered) {
                          inputClass += isCorrect ? ' border-green-500 bg-green-100 text-green-800' : ' border-yellow-500 bg-yellow-100 text-yellow-800';
                      } else {
                          inputClass += ' border-blue-400 focus:border-blue-700';
                      }

                      return (
                        <div key={index} className="mb-8 pb-8 border-b-2 border-slate-200 last:border-b-0">
                          <div className="text-lg text-slate-800 flex flex-wrap items-center">
                            {item.example.split('_____')[0]}
                            <input type="text" value={gapFillAnswers[index] || ''}
                              onChange={(e) => !showGapFillResults && handleAnswer('gapFill', index, e.target.value)}
                              disabled={showGapFillResults} className={inputClass} placeholder="TYPE HERE..." />
                            {item.example.split('_____')[1]}
                          </div>
                          {showGapFillResults && isAnswered && !isCorrect && (
                             <p className="mt-2 text-sm text-green-700 font-semibold"> CORRECT ANSWER: {item.acceptedAnswers[0]} </p>
                          )}
                        </div>
                      );
                    })}
                     {!showGapFillResults ? (
                      <button onClick={() => checkAnswers('gap_fill')} disabled={Object.keys(gapFillAnswers).length < vocabulary.length}
                        className="w-full mt-6 px-6 py-4 bg-blue-800 text-white rounded-lg font-semibold disabled:opacity-50 disabled:cursor-not-allowed hover:bg-blue-900 transition text-lg shadow-lg">
                        CHECK ANSWERS
                      </button>
                    ) : (
                      <button onClick={() => moveToNextStage('COMPLETION')}
                        className="w-full mt-6 px-6 py-4 bg-green-600 text-white rounded-lg font-semibold hover:bg-green-700 transition text-lg shadow-lg">
                        SEE YOUR FINAL RESULTS
                      </button>
                    )}
                  </div>
                </div>
              </div>
            );
          }
          
          if (stage === 'COMPLETION') {
            const totalQuestions = vocabulary.length * 2;
            const percentage = Math.round((score / totalQuestions) * 100);
            return (
              <div className="min-h-screen bg-gradient-to-br from-blue-900 to-blue-700 p-4 sm:p-8 flex items-center justify-center uppercase">
                <div className="max-w-2xl mx-auto text-center">
                  <div className="bg-white rounded-2xl shadow-2xl p-8 sm:p-12">
                    <Award size={80} className="mx-auto text-yellow-500 mb-6" />
                    <h1 className="text-4xl font-black text-blue-900 mb-4">CONGRATULATIONS!</h1>
                    <p className="text-xl text-blue-800 mb-4">YOU'VE COMPLETED THE '{currentCategory}' MODULE!</p>
                    <div className="text-7xl font-black text-blue-800 my-6">{percentage}%</div>
                    <p className="text-2xl text-slate-700 mb-8">
                      YOU SCORED <span className="font-bold text-green-600">{score}</span> OUT OF {totalQuestions} QUESTIONS CORRECT!
                    </p>
                    <div className="flex flex-col sm:flex-row gap-4 justify-center">
                      <button onClick={() => resetState(currentCategory)}
                        className="w-full sm:w-auto px-8 py-4 bg-blue-800 text-white rounded-lg font-bold hover:bg-blue-900 transition text-lg shadow-lg">
                        PRACTICE AGAIN
                      </button>
                      <button onClick={() => resetState()}
                        className="w-full sm:w-auto px-8 py-4 bg-slate-200 text-blue-800 rounded-lg font-bold hover:bg-slate-300 transition text-lg">
                        CHOOSE ANOTHER CATEGORY
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            );
          }
          
          return null;
        };

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<BusinessEnglishApp />);
    </script>
</body>
</html>
